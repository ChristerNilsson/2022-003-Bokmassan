// Generated by CoffeeScript 2.5.1
var DX, DY, FIRST, N, SCENES, TITLE0, TITLE1, XOFF, YOFF, autonomous, avslutade, createScrollers, draw, drawBox, drawGrid, drawHeader, drawInfo, drawTitle, event, findIndex, img, kommande, lastTimestamp, lastTouchEnded, minutes, newdraw, p, preload, pretty, prevTimestamp, pågående, released, rutnät, scenes, scrollers, setup, startX, startY, tider, timestamp, touchEnded, touchMoved, touchStarted,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

TITLE0 = 'Svenska bok- och mediemässan';

TITLE1 = '2022-08-20';

scenes = {};

SCENES = 0;

XOFF = 0; // pixels

YOFF = 0; // pixels

DX = 0;

DY = 0;

FIRST = 0; // första musklickets x-koordinat

N = 24; // antal fem minuters perioder

img = null;

scrollers = [];

lastTouchEnded = 0;

released = true;

startX = 0;

startY = 0;

prevTimestamp = 0;

lastTimestamp = 0;

avslutade = 0;

pågående = 0;

kommande = 0;

p = 0;

minutes = function(hhmm) {
  var h, m;
  h = Math.floor(hhmm / 100);
  m = hhmm % 100;
  return 60 * h + m;
};

pretty = function(m) { // pretty(67) = "01:07"
  var h, min;
  m = modulo(m, 24 * 60);
  min = m % 60;
  m = m - min;
  h = m / 60;
  if (h < 10) {
    h = '0' + h;
  }
  if (min < 10) {
    min = '0' + min;
  }
  return h + ':' + min;
};

autonomous = true;

timestamp = minutes(1512);

event = function(scen, lst) {
  lst[0] = minutes(lst[0]);
  scenes[scen] || (scenes[scen] = []);
  return scenes[scen].push(lst);
};

event('S1', [1100, 15, "Tal", "Carl Lundström"]);

event('S1', [1120, 45, "P1. Migrationspolitik", "Lennart Matikainen, Arne Weinz, Hans Jensevik, Stefan Torssell, Evelina Hahne"]);

event('S1', [1215, 40, "P6. Kriminalitet", "Axel W Karlsson, Alexander Söderberg, Nils Littorin, Conny Andersson, Nick Alinia"]);

event('S1', [1300, 20, "Tal", "Mikael Willgert"]);

event('S1', [1330, 35, "P2. Energipolitik/Kärnkraft", "Peder Bokenhielm, Li Sam Björk, Jan Berger, Alexander Pohl"]);

event('S1', [1410, 10, "Tal", "Tobbe Larsson"]);

event('S1', [1425, 45, "P3. Nato", "Roger Richthoff, Johan Lindblad, Oscar Overgaard, Ulf Sandmark, Jeff Ahl"]);

event('S1', [1545, 10, "Tal", "Arne Weinz"]);

event('S1', [1600, 40, "P5. Klimatfrågan", "Gösta Wallin, Staffan Mörner, Sture Åström, Alfred Westh"]);

event('S1', [1650, 10, "P4. Ekonomi", "Henrik Sundin"]);

event('S2', [1130, 40, "P1. Demonstrationer", "Max Winter, Håkan Bergmark, Johan Widén, Pierre Tinderfjäll, Emilia Ögell"]);

event('S2', [1220, 10, "Tal", "Eva Donell"]);

event('S2', [1235, 35, "P3. Intresseorganisationer", "Ingrid Carlqvist, Peder Bokenhielm, René Malmgren, Andreas Hultén"]);

event('S2', [1320, 10, "Tal", "Alfred Westh"]);

event('S2', [1335, 50, "P4. Rörelser", "Marianne Liljeholt, Miranda Törnqvist, Glenn Dormer, Mikael Cromsjö, Alfred Westh, Maneka Helleberg"]);

event('S2', [1510, 10, "HMF-Medalj utdelning", "Rasmus Paludan"]);

event('S2', [1525, 10, "Tal", "Robert Mathiasson"]);

event('S2', [1540, 35, "P2. Nätverk", "David Bergqvist, Tobbe Larsson, Eva Donell, Andreas Jansson"]);

event('S2', [1625, 10, "Tal", "Jonas Nilsson"]);

event('S2', [1650, 10, "P4. Alternativmedier", "Carl Lundström"]);

event('S3', [1140, 40, "P2. Organisationer", "Johan Lindblad, Mikael Fjällid, Jesper Johansson, Aida Reva, Love Romert"]);

event('S3', [1230, 45, "P5. Agenda 2030 och", "Carl Lundström, Hans Erixon, Torbjörn Holkner, Sture Åström, Gustav Kasselstrand"]);

event('S3', [1335, 50, "P3. Metoder", "Alexander, Helen Osieja, Felicia Eriksson, Johannes Haddad, Robert Rosenkvist, Fabian Fjälling"]);

event('S3', [1435, 25, "Livepodd", "Jonas Nilsson, Anton Stigermark"]);

event('S3', [1505, 10, "Tal", "Nils Littorin"]);

event('S3', [1520, 35, "P4. Övervakningsmetoder", "Rikard Högberg, Åke blomdahl, Lena Ohlson, Ingemar Ljungqvist"]);

event('S3', [1615, 35, "P1. Personer", "Johan Lindblad, Stefan Torsell, Tommy Ulmnäs, Christian Peterson, Mattias Dahlgren"]);

event('S4', [1225, 30, "D3. Ryssland eller Ukraina?", "Arne Weinz, Izabella Jarvandi, Gösta Wallin, Erik Almqvist"]);

event('S4', [1305, 20, "D1. Abortfrågan", "Nick Alinia, Johanna Carsbrant, Miranda Törnqvist"]);

event('S4', [1335, 25, "D6. Mångkultur för/emot?", "Izabella Jarvandi, Karl-Olov Arnstberg, Andreas Sidkvist"]);

event('S4', [1410, 25, "D10. Uthängningar eller inte?", "Izabella Jarvandi, Christian Peterson, Robert Mathiason"]);

event('S4', [1445, 20, "D8. AI Hot eller möjlighet?", "Izabella Jarvandi, Tobbe Larsson, Mikael Cromsjö"]);

event('S4', [1515, 30, "D9. Klimatbluff eller reellt hot?", "Izabella Jarvandi, Lars Bern, Alfred Westh"]);

event('S4', [1555, 20, "D7. Bränna koranen", "Christian Peterson, Rasmus Paludan, Tobbe Larsson"]);

event('S4', [1625, 30, "D5. NATO för/emot?", "Izabella Jarvandi, Roger Richthoff, Tage Perntz"]);

event('S5', [1140, 45, "Personporträtt 2", "Zoia Zakariasdotter, Ylva Franzén"]);

event('S5', [1235, 40, "Personporträtt 4", "Jan Tullberg"]);

event('S5', [1325, 40, "Personporträtt 5", "Lars Bern"]);

event('S5', [1415, 40, "Personporträtt 3", "Selma Gamaleldin"]);

event('S5', [1505, 40, "Personporträtt 6", "Patrik Engellau"]);

event('S5', [1555, 40, "Personporträtt 1", "Carl Lundström"]);

event('S5', [1645, 15, "Inblick med Nick", "Nick Alinia, Rasmus Paludan"]);

event('S6', [1235, 35, "Ek4. Elpriserna", "Magnus Stenlund, Jan Blomgren"]);

event('S6', [1320, 30, "Ek3. Räntorna", "Peter Albelin"]);

event('S6', [1400, 30, "Ek2. Investeringar", "Henrik Sundin"]);

event('S6', [1455, 30, "Ek5. Matpriserna", "Olle Felten"]);

event('S6', [1535, 30, "Ek1. Inflationen", "Jan Tullberg"]);

event('S6', [1615, 30, "Ek6. Skatterna", "Micael Hamberg"]);

event('S7', [1220, 30, "Parti8. Nix to the Six", "Emilia Ögell, Hans Jensevik"]);

event('S7', [1300, 15, "Parti6. Nyttiga Svenne", "Emilia Ögell, Ylva Franzén & Johan Lindblad"]);

event('S7', [1325, 30, "Parti1. AfS", "Erik Almqvist, Gustav Kasselstrand, Andreas Feymark"]);

event('S7', [1400, 25, "Parti10. Europeiska Arbetarpartiet", "Erik Almqvist, Kjell Sundqvist"]);

event('S7', [1435, 15, "Parti9. Partiet Frihet", "Emilia Ögell, Max Winter & Natalie Jonsson"]);

event('S7', [1500, 30, "Parti4. MOD", "Erik Almqvist, Andreas Sidqvist"]);

event('S7', [1535, 30, "Parti7. Malmölistan", "Erik Almqvist, Nils Littorin"]);

event('S7', [1615, 25, "Parti11. Direktdemokraterna", "Erik Almqvist, Lotte Johansson"]);

event('S7', [1650, 10, "Parti5. Kristna Värdepartiet", "Emilia Ögell"]);

event('S8', [1145, 20, "Film", "Ingrid Carlqvist"]);

event('S8', [1210, 10, "Fotograf", "Lotte Johansson"]);

event('S8', [1225, 20, "TV-spel", "William Hahne"]);

event('S8', [1250, 20, "Film", "Jonas Nilsson"]);

event('S8', [1320, 25, "Musik", "Ulf Bejerstrand"]);

event('S8', [1355, 20, "Musik", "Martina Edoff"]);

event('S8', [1415, 5, "Sång", "David Berg"]);

event('S8', [1425, 20, "Film", "Jon Rekdahl"]);

event('S8', [1450, 10, "Konst", "Åke Blomdahl"]);

event('S8', [1505, 10, "Konst", "Dan Park"]);

event('S8', [1525, 30, "Musik", "Fredrik Larsson, Joakim"]);

event('S8', [1605, 25, "Musik", "Miqael Hicks"]);

event('S8', [1635, 25, "Författare", "Einar Askestad"]);

drawTitle = function() {
  push();
  fill('darkgray');
  textAlign(RIGHT);
  textSize(0.04 * height);
  text(TITLE1, width, 0.25 * YOFF);
  text(TITLE0, width, 0.75 * YOFF);
  return pop();
};

rutnät = function() {
  var i, k, l, len, len1, ref, ref1, x, y;
  push();
  stroke('darkgray');
  textSize(0.02 * height);
  ref = range(N + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    x = XOFF + i * DX;
    line(x, YOFF, x, YOFF + SCENES * DY);
  }
  ref1 = range(SCENES + 1);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    y = YOFF + DY * i;
    line(XOFF, y, XOFF + N * DX, y);
  }
  return pop();
};

tider = function(ts, left) {
  var date, s, x;
  push();
  textSize(0.04 * height);
  fill("darkgray");
  text(pretty(left), XOFF, 0.6 * DY);
  push();
  x = XOFF + N / 2 * DX + DX / 5 * ts;
  fill("yellow");
  textAlign(CENTER);
  date = new Date();
  if (autonomous) {
    fill("yellow");
    s = date.getSeconds();
    if (s < 10) {
      s = '0' + s;
    }
    text(pretty(timestamp) + ':' + s, x, 0.6 * DY);
  } else {
    fill("darkgray");
    text(pretty(timestamp), x, 0.6 * DY);
  }
  pop();
  textAlign(RIGHT);
  fill("darkgray");
  text(pretty(left + 120), XOFF + N * DX, 0.6 * DY);
  stroke("YELLOW");
  line(x, YOFF, XOFF + N / 2 * DX + DX / 5 * ts, YOFF + SCENES * DY);
  return pop();
};

drawGrid = function(ts, left) {
  rutnät();
  return tider(ts, left);
};

drawBox = function(i, event, ts, j) {
  var d, duration, hhmm, x;
  hhmm = event[0];
  duration = event[1];
  push();
  x = XOFF + N / 2 * DX + DX * (hhmm - timestamp + ts) / 5;
  if (event[0] > timestamp) {
    fill("lightgreen");
    kommande++;
  } else if (event[0] + event[1] <= timestamp) {
    fill("red");
    avslutade++;
  } else {
    fill("yellow");
    pågående++;
  }
  rect(x, YOFF + 0.15 * DY + DY * i, duration / 5 * DX, 0.7 * DY, 6);
  d = duration + hhmm - timestamp;
  if (hhmm > timestamp) {
    d = duration;
  }
  if (d > 0) {
    textSize(0.04 * height);
    textAlign(CENTER, CENTER);
    fill("black");
    text(d, x + duration / 5 * DX / 2, YOFF + 0.55 * DY + DY * i);
  }
  return pop();
};

findIndex = function(events, timestamp) {
  var index, k, len, ref;
  ref = range(events.length);
  for (k = 0, len = ref.length; k < len; k++) {
    index = ref[k];
    event = events[index];
    if (timestamp < event[0] + event[1]) {
      return index;
    }
  }
  return -1;
};

drawHeader = function() {
  var x0, x1, x2, x3, x4, xoff, y, yoff;
  push();
  textSize(0.04 * height);
  xoff = XOFF + N * DX;
  yoff = 0;
  fill("red");
  text(avslutade + " avslutade", XOFF, 0.2 * DY);
  textAlign(CENTER);
  fill("darkgray");
  textStyle(ITALIC);
  //text "En ruta = 5 min",XOFF+N/4*DX, 0.4*DY
  //text "Svep för att byta tid",XOFF+3*N/4*DX, 0.4*DY
  textStyle(NORMAL);
  fill('yellow');
  text(pågående + " pågående", XOFF + N / 2 * DX, 0.2 * DY);
  textAlign(RIGHT);
  fill("lightgreen");
  text(kommande + " kommande", xoff, 0.2 * DY);
  x0 = XOFF + N * DX + 0.4 * DX;
  x1 = x0 + textWidth('  Scen');
  x2 = x1 + textWidth('  Start');
  x3 = x2 + textWidth('  Längd');
  x4 = x3 + textWidth('  Event');
  y = yoff + 0.2 * DY;
  textAlign(LEFT);
  fill("red");
  text("Scen", x0, y);
  fill("yellow");
  text("Start", x1, y);
  fill("white");
  text("Längd", x2, y);
  fill("lightblue");
  text("Event", x3, y);
  fill("darkgray");
  text("Deltagare", x0, yoff + 0.6 * DY);
  text;
  return pop();
};

createScrollers = function() {
  var i, index, k, key, keys, len, ref, results, textsize, x0, xoff, y0, y1;
  scrollers = [];
  keys = _.keys(scenes);
  ref = range(keys.length);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    key = keys[i];
    index = findIndex(scenes[key], timestamp);
    event = scenes[key][index];
    if (index !== -1) {
      xoff = XOFF + N * DX;
      textsize = 0.04 * height;
      x0 = xoff + 0.4 * DX;
      y0 = YOFF + 0.4 * DY + DY * i;
      y1 = y0 + 0.07 * DY;
      results.push(scrollers.push(new TextScrollerText(x0, y1, width / 2, 1.3 * textsize, textsize, event[3])));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

drawInfo = function(ts) {
  var i, index, j, k, key, keys, l, len, len1, len2, n, ref, ref1, results, scroller, x0, x1, x2, x3, xoff, y0, y1;
  avslutade = 0;
  pågående = 0;
  kommande = 0;
  keys = _.keys(scenes);
  ref = range(keys.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    key = keys[i];
    index = findIndex(scenes[key], timestamp);
    event = scenes[key][index];
    ref1 = range(_.size(scenes[key]));
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      drawBox(i, scenes[key][j], ts);
    }
    if (index !== -1) {
      xoff = XOFF + N * DX;
      push();
      textSize(0.04 * height);
      fill("black");
      sc();
      rect(xoff + 2, YOFF + DY * i, width, DY);
      y0 = YOFF + 0.35 * DY + DY * i;
      y1 = y0 + 0.35 * DY;
      //y2 = y1 + 0.3 * DY
      x0 = xoff + 0.4 * DX;
      x1 = x0 + textWidth('  ' + key);
      x2 = x1 + textWidth('  ' + pretty(event[0]));
      x3 = x2 + textWidth('  ' + event[1]);
      textAlign(LEFT, CENTER);
      fill("red");
      text(key, x0, y0);
      fill("yellow");
      text(pretty(event[0]), x1, y0);
      fill("white");
      text(event[1], x2, y0);
      fill("lightblue");
      text(event[2], x3, y0);
      pop();
    }
  }
  results = [];
  for (n = 0, len2 = scrollers.length; n < len2; n++) {
    scroller = scrollers[n];
    results.push(scroller.draw());
  }
  return results;
};

newdraw = function() {
  var k, len, results, scroller;
  background("black");
  results = [];
  for (k = 0, len = scrollers.length; k < len; k++) {
    scroller = scrollers[k];
    results.push(scroller.draw());
  }
  return results;
};

draw = function() {
  var date, left, size, ts;
  bg(0);
  if (autonomous) {
    date = new Date();
    timestamp = minutes(100 * date.getHours() + date.getMinutes());
  }
  ts = timestamp % 5;
  left = timestamp - ts - 60;
  if (lastTimestamp !== timestamp) {
    lastTimestamp = timestamp;
    createScrollers();
  }
  drawTitle();
  drawGrid(ts, left);
  drawInfo(ts);
  drawHeader();
  size = 0.1 * width;
  return image(img, 10, height - 1.1 * size, size, size);
};

touchStarted = function(event) {
  var date, lastTouchStarted;
  event.preventDefault();
  lastTouchStarted = new Date();
  if (!released) {
    return;
  }
  if ((XOFF < mouseX && mouseX < XOFF + N * DX) && (YOFF < mouseY && mouseY < YOFF + SCENES * DY)) {

  } else {
    autonomous = true;
    date = new Date();
    timestamp = minutes(100 * date.getHours() + date.getMinutes());
    released = true;
    return;
  }
  released = false;
  startX = mouseX;
  startY = mouseY;
  prevTimestamp = timestamp;
  return false;
};

touchMoved = function(event) {
  var ts;
  event.preventDefault();
  if (released) {
    return;
  }
  autonomous = false;
  ts = 0; //timestamp % 5
  timestamp = prevTimestamp - Math.round((mouseX - startX) * 5 / DX - ts); // - 60
  timestamp = modulo(timestamp, 24 * 60);
  timestamp = timestamp - timestamp % 5;
  return false;
};

touchEnded = function(event) {
  event.preventDefault();
  if ((new Date()) - lastTouchEnded < 500) {
    lastTouchEnded = new Date(); // to prevent double bounce
    return;
  }
  if (released) {
    return;
  }
  released = true;
  return false;
};

preload = function() {
  return img = loadImage('qr-code.png');
};

setup = function() {
  var displaywidth, textsize;
  displaywidth = 150;
  textsize = 20;
  scrollers = [];
  //pixelDensity 1
  createCanvas(innerWidth, innerHeight);
  // frameRate 10
  SCENES = _.size(scenes);
  DX = Math.round(0.02 * width);
  DY = 0.9 * height / SCENES;
  XOFF = 0.0 * DX; // pixels
  return YOFF = 0.8 * DY; // pixels
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\sketch.coffee