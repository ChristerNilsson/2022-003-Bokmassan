// Generated by CoffeeScript 2.5.1
var SEPARATOR, TextDisplay, twSEP;

SEPARATOR = ' • ';

twSEP = 0;

TextDisplay = (function() {
  var moveZeroFirst;

  class TextDisplay {
    constructor(dx, dy, dw1, dh, ts) {
      this.dx = dx;
      this.dy = dy;
      this.dw = dw1;
      this.dh = dh;
      this.ts = ts;
      this.dw = Math.round(this.dw);
    }

    update(text) {
      var widths;
      this.text = text;
      this.names = this.text.split(', ');
      textSize(this.ts);
      twSEP = textWidth(SEPARATOR);
      widths = this.names.map(function(name, index) {
        return [Math.round(textWidth(name)), index];
      });
      widths.sort();
      widths.reverse();
      console.log(`widths ${widths}, ${this.dw}`);
      this.groups = this.gruppera(widths, this.dw);
      return console.log(`groups ${this.groups}`);
    }

    draw() {
      var date, group, i, index, k, len, name, ref, results, w;
      textAlign(LEFT, CENTER);
      textSize(this.ts);
      date = new Date();
      if (this.groups.length === 0) {
        return;
      }
      group = this.groups[date.getSeconds() % this.groups.length];
      w = this.dx;
      ref = range(group.length);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        index = group[i];
        name = this.names[index];
        if (i < group.length - 1) {
          name += SEPARATOR;
        }
        if (index === 0) {
          fill('white');
        } else {
          fill('gray');
        }
        text(name, w, this.dy + this.dh / 2);
        results.push(w += textWidth(name));
      }
      return results;
    }

    gruppera(widths, dw) {
      var cw, groups, i, index, indexj, j, k, l, len, len1, ref, ref1, temp, w, wj;
      groups = [];
      ref = range(widths.length);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        [w, index] = widths[i];
        if (w === 999999) {
          continue;
        }
        cw = w;
        temp = [index];
        ref1 = range(i + 1, widths.length);
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          [wj, indexj] = widths[j];
          if (wj === 999999) {
            continue;
          }
          console.log(cw + wj + temp.length * twSEP, dw);
          if (cw + wj + temp.length * twSEP <= dw) {
            cw += wj;
            temp.push(indexj);
            widths[j] = [999999, indexj];
          }
        }
        if (temp.length > 0) {
          groups.push(temp);
        }
      }
      groups = moveZeroFirst(groups);
      return groups;
    }

  };

  moveZeroFirst = function(groups) {
    return groups.map(function(group) {
      group.sort();
      return group;
    });
  };

  return TextDisplay;

}).call(this);

// class TextScroller
// 	constructor : (@dx,@dy,@dw,@dh,@ts) ->
// 		# Observera: iOS + image kräver heltal för parametrarna
// 		@dx = Math.round @dx
// 		@dy = Math.round @dy
// 		@dw = Math.round @dw
// 		@dh = Math.round @dh
// 		@ts = Math.round @ts
// 		@pg = createGraphics 10000, @dh # w

// 	update : (txt) ->
// 		@text = txt
// 		push()
// 		textSize @ts
// 		@visible = @text != ''
// 		@sz = Math.round textWidth @text
// 		@scroll = @sz > @dw
// 		if @scroll
// 			@sz = Math.round textWidth @text + ' • '
// 			@makeImage @text + ' • ' + @text
// 			@p = 0 
// 		else
// 			@makeImage @text
// 		pop() 

// 	makeImage : (txt) ->
// 		@pg.background "black"
// 		@pg.textSize @ts
// 		@pg.fill "gray"
// 		@pg.textAlign LEFT,CENTER
// 		@pg.text txt,0,Math.round @dh/2

// 	draw : () ->
// 		if @visible
// 			if @scroll
// 				image @pg,@dx,@dy,@dw,@dh,@p,0,@dw,@dh
// 				@p = (@p+1) % @sz
// 			else
// 				image @pg,@dx,@dy

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dFNjcm9sbGVyLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXFRleHRTY3JvbGxlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQTs7QUFBQSxTQUFBLEdBQVk7O0FBQ1osS0FBQSxHQUFROztBQUVGOzs7RUFBTixNQUFBLFlBQUE7SUFDQyxXQUFjLEdBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxDQUFBO01BQUMsSUFBQyxDQUFBO01BQUcsSUFBQyxDQUFBO01BQUcsSUFBQyxDQUFBO01BQUcsSUFBQyxDQUFBO01BQUcsSUFBQyxDQUFBO01BQy9CLElBQUMsQ0FBQSxFQUFELEdBQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFDLENBQUEsRUFBWjtJQURPOztJQUdkLE1BQVMsQ0FBQyxJQUFELENBQUE7QUFDVixVQUFBO01BQUUsSUFBQyxDQUFBLElBQUQsR0FBUTtNQUNSLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFOLENBQVksSUFBWjtNQUNULFFBQUEsQ0FBUyxJQUFDLENBQUEsRUFBVjtNQUNBLEtBQUEsR0FBUSxTQUFBLENBQVUsU0FBVjtNQUNSLE1BQUEsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFBLENBQUMsSUFBRCxFQUFNLEtBQU4sQ0FBQTtlQUFnQixDQUFDLElBQUksQ0FBQyxLQUFMLENBQVcsU0FBQSxDQUFVLElBQVYsQ0FBWCxDQUFELEVBQTZCLEtBQTdCO01BQWhCLENBQVg7TUFDVCxNQUFNLENBQUMsSUFBUCxDQUFBO01BQ0EsTUFBTSxDQUFDLE9BQVAsQ0FBQTtNQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSxPQUFBLENBQUEsQ0FBVSxNQUFWLENBQUEsRUFBQSxDQUFBLENBQXFCLElBQUMsQ0FBQSxFQUF0QixDQUFBLENBQVo7TUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMs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VyxRQUFBLENBQUMsS0FBRCxDQUFBO01BQ1YsS0FBSyxDQUFDLElBQU4sQ0FBQTthQUNBO0lBRlUsQ0FBWDtFQURlOzs7Ozs7QUFsQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiU0VQQVJBVE9SID0gJyDigKIgJ1xyXG50d1NFUCA9IDBcclxuXHJcbmNsYXNzIFRleHREaXNwbGF5XHJcblx0Y29uc3RydWN0b3IgOiAoQGR4LEBkeSxAZHcsQGRoLEB0cykgLT5cclxuXHRcdEBkdyA9IE1hdGgucm91bmQgQGR3XHJcblxyXG5cdHVwZGF0ZSA6ICh0ZXh0KSAtPlxyXG5cdFx0QHRleHQgPSB0ZXh0XHJcblx0XHRAbmFtZXMgPSBAdGV4dC5zcGxpdCAnLCAnXHJcblx0XHR0ZXh0U2l6ZSBAdHNcclxuXHRcdHR3U0VQID0gdGV4dFdpZHRoIFNFUEFSQVRPUlxyXG5cdFx0d2lkdGhzID0gQG5hbWVzLm1hcCAobmFtZSxpbmRleCkgLT4gW01hdGgucm91bmQodGV4dFdpZHRoKG5hbWUpKSxpbmRleF1cclxuXHRcdHdpZHRocy5zb3J0KClcclxuXHRcdHdpZHRocy5yZXZlcnNlKClcclxuXHRcdGNvbnNvbGUubG9nIFwid2lkdGhzICN7d2lkdGhzfSwgI3tAZHd9XCJcclxuXHRcdEBncm91cHMgPSBAZ3J1cHBlcmEgd2lkdGhzLEBkd1xyXG5cdFx0Y29uc29sZS5sb2cgXCJncm91cHMgI3tAZ3JvdXBzfVwiXHJcblxyXG5cdGRyYXcgOiAoKSAtPlxyXG5cdFx0dGV4dEFsaWduIExFRlQsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSBAdHNcclxuXHRcdGRhdGUgPSBuZXcgRGF0ZSgpXHJcblx0XHRpZiBAZ3JvdXBzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0XHRncm91cCA9IEBncm91cHNbZGF0ZS5nZXRTZWNvbmRzKCkgJSBAZ3JvdXBzLmxlbmd0aF1cclxuXHRcdHcgPSBAZHhcclxuXHRcdGZvciBpIGluIHJhbmdlIGdyb3VwLmxlbmd0aCBcclxuXHRcdFx0aW5kZXggPSBncm91cFtpXVxyXG5cdFx0XHRuYW1lID0gQG5hbWVzW2luZGV4XVxyXG5cdFx0XHRpZiBpPGdyb3VwLmxlbmd0aC0xIHRoZW4gbmFtZSArPSBTRVBBUkFUT1JcclxuXHRcdFx0aWYgaW5kZXggPT0gMCB0aGVuIGZpbGwgJ3doaXRlJyBlbHNlIGZpbGwgJ2dyYXknXHJcblx0XHRcdHRleHQgbmFtZSwgdyxAZHkrQGRoLzJcclxuXHRcdFx0dyArPSB0ZXh0V2lkdGggbmFtZSBcclxuXHJcblx0bW92ZVplcm9GaXJzdCA9IChncm91cHMpIC0+XHJcblx0XHRncm91cHMubWFwIChncm91cCkgLT4gXHJcblx0XHRcdGdyb3VwLnNvcnQoKVxyXG5cdFx0XHRncm91cFxyXG5cclxuXHRncnVwcGVyYSA6ICh3aWR0aHMsZHcpIC0+XHJcblx0XHRncm91cHMgPSBbXVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2Ugd2lkdGhzLmxlbmd0aCBcclxuXHRcdFx0W3csaW5kZXhdID0gd2lkdGhzW2ldXHJcblx0XHRcdGlmIHcgPT0gOTk5OTk5IHRoZW4gY29udGludWUgXHJcblx0XHRcdGN3ID0gd1xyXG5cdFx0XHR0ZW1wID0gW2luZGV4XVxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBpKzEsd2lkdGhzLmxlbmd0aFxyXG5cdFx0XHRcdFt3aixpbmRleGpdID0gd2lkdGhzW2pdXHJcblx0XHRcdFx0aWYgd2ogPT0gOTk5OTk5IHRoZW4gY29udGludWVcclxuXHRcdFx0XHRjb25zb2xlLmxvZyBjdyArIHdqICsgdGVtcC5sZW5ndGggKiB0d1NFUCwgZHcgXHJcblx0XHRcdFx0aWYgY3cgKyB3aiArIHRlbXAubGVuZ3RoICogdHdTRVAgPD0gZHcgXHJcblx0XHRcdFx0XHRjdyArPSB3alxyXG5cdFx0XHRcdFx0dGVtcC5wdXNoIGluZGV4alxyXG5cdFx0XHRcdFx0d2lkdGhzW2pdID0gWzk5OTk5OSxpbmRleGpdXHJcblx0XHRcdGlmIHRlbXAubGVuZ3RoID4gMCB0aGVuIGdyb3Vwcy5wdXNoIHRlbXBcclxuXHRcdGdyb3VwcyA9IG1vdmVaZXJvRmlyc3QgZ3JvdXBzXHJcblx0XHRncm91cHNcclxuXHJcbiMgY2xhc3MgVGV4dFNjcm9sbGVyXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAZHgsQGR5LEBkdyxAZGgsQHRzKSAtPlxyXG4jIFx0XHQjIE9ic2VydmVyYTogaU9TICsgaW1hZ2Uga3LDpHZlciBoZWx0YWwgZsO2ciBwYXJhbWV0cmFybmFcclxuIyBcdFx0QGR4ID0gTWF0aC5yb3VuZCBAZHhcclxuIyBcdFx0QGR5ID0gTWF0aC5yb3VuZCBAZHlcclxuIyBcdFx0QGR3ID0gTWF0aC5yb3VuZCBAZHdcclxuIyBcdFx0QGRoID0gTWF0aC5yb3VuZCBAZGhcclxuIyBcdFx0QHRzID0gTWF0aC5yb3VuZCBAdHNcclxuIyBcdFx0QHBnID0gY3JlYXRlR3JhcGhpY3MgMTAwMDAsIEBkaCAjIHdcclxuXHJcbiMgXHR1cGRhdGUgOiAodHh0KSAtPlxyXG4jIFx0XHRAdGV4dCA9IHR4dFxyXG4jIFx0XHRwdXNoKClcclxuIyBcdFx0dGV4dFNpemUgQHRzXHJcbiMgXHRcdEB2aXNpYmxlID0gQHRleHQgIT0gJydcclxuIyBcdFx0QHN6ID0gTWF0aC5yb3VuZCB0ZXh0V2lkdGggQHRleHRcclxuIyBcdFx0QHNjcm9sbCA9IEBzeiA+IEBkd1xyXG4jIFx0XHRpZiBAc2Nyb2xsXHJcbiMgXHRcdFx0QHN6ID0gTWF0aC5yb3VuZCB0ZXh0V2lkdGggQHRleHQgKyAnIOKAoiAnXHJcbiMgXHRcdFx0QG1ha2VJbWFnZSBAdGV4dCArICcg4oCiICcgKyBAdGV4dFxyXG4jIFx0XHRcdEBwID0gMCBcclxuIyBcdFx0ZWxzZVxyXG4jIFx0XHRcdEBtYWtlSW1hZ2UgQHRleHRcclxuIyBcdFx0cG9wKCkgXHJcblxyXG4jIFx0bWFrZUltYWdlIDogKHR4dCkgLT5cclxuIyBcdFx0QHBnLmJhY2tncm91bmQgXCJibGFja1wiXHJcbiMgXHRcdEBwZy50ZXh0U2l6ZSBAdHNcclxuIyBcdFx0QHBnLmZpbGwgXCJncmF5XCJcclxuIyBcdFx0QHBnLnRleHRBbGlnbiBMRUZULENFTlRFUlxyXG4jIFx0XHRAcGcudGV4dCB0eHQsMCxNYXRoLnJvdW5kIEBkaC8yXHJcblxyXG4jIFx0ZHJhdyA6ICgpIC0+XHJcbiMgXHRcdGlmIEB2aXNpYmxlXHJcbiMgXHRcdFx0aWYgQHNjcm9sbFxyXG4jIFx0XHRcdFx0aW1hZ2UgQHBnLEBkeCxAZHksQGR3LEBkaCxAcCwwLEBkdyxAZGhcclxuIyBcdFx0XHRcdEBwID0gKEBwKzEpICUgQHN6XHJcbiMgXHRcdFx0ZWxzZVxyXG4jIFx0XHRcdFx0aW1hZ2UgQHBnLEBkeCxAZHlcclxuIl19
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\TextScroller.coffee