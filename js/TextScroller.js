// Generated by CoffeeScript 2.5.1
var SEPARATOR, TextDisplay, twSEP;

SEPARATOR = ' • ';

twSEP = 0;

TextDisplay = class TextDisplay {
  constructor(dx, dy, dw1, dh, ts) {
    this.dx = dx;
    this.dy = dy;
    this.dw = dw1;
    this.dh = dh;
    this.ts = ts;
    this.dw = Math.round(this.dw);
  }

  update(text) {
    var group, i, index, j, k, l, len, len1, n, name, ref, results, summa, w, widths, wx, wy;
    this.text = text;
    this.names = this.text.split(', ');
    if (this.text.length === 0) {
      this.groups = [];
    }
    if (this.names.length === 1) {
      this.groups = [[0]];
    }
    textSize(this.ts);
    twSEP = textWidth(SEPARATOR);
    widths = this.names.map(function(name, index) {
      return [Math.round(textWidth(name)), index];
    });
    widths.sort();
    widths.reverse();
    summa = 0;
    for (k = 0, len = widths.length; k < len; k++) {
      [w, index] = widths[k];
      summa += w;
    }
    if (summa === 0) {
      return [];
    }
    //if widths.length == 1 then return [[0]]
    this.groups = this.gruppera(widths, this.dw);
    this.groups = this.groups.map(function(group) {
      return group.sort();
    });
    // skapa image med grupperna A, ABA, ABCA...
    n = this.groups.length;
    if (n > 1) {
      n++;
    }
    this.pg = createGraphics(this.dw, this.dh * n);
    this.pg.textSize(this.ts);
    this.pg.background("black");
    this.p = 0;
    ref = range(n);
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      group = this.groups[i % this.groups.length];
      wx = 0;
      wy = (i + 0.8) * this.dh;
      results.push((function() {
        var len2, m, ref1, results1;
        ref1 = range(group.length);
        results1 = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          j = ref1[m];
          index = group[j];
          name = this.names[index];
          if (j < group.length - 1) {
            name += SEPARATOR;
          }
          if (index === 0) {
            this.pg.fill('white');
          } else {
            this.pg.fill('gray');
          }
          this.pg.text(name, wx, wy);
          results1.push(wx += this.pg.textWidth(name));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  draw() {
    var date, i, n;
    if (this.groups.length === 0) {
      return;
    }
    n = this.groups.length;
    if (n === 1) {
      i = 0;
      image(this.pg, this.dx, this.dy, this.dw, this.dh, 0, 0, this.dw, this.dh);
    } else if (n === 2) {
      image(this.pg, this.dx, this.dy, this.dw, 2 * this.dh, 0, this.dh, this.dw, 2 * this.dh);
    } else {
      date = new Date();
      //i = date.getSeconds() % (@groups.length+1)
      image(this.pg, this.dx, this.dy, this.dw, this.dh, 0, this.p, this.dw, this.dh);
      return this.p = (this.p + 0.5) % (this.pg.height - this.dh);
    }
  }

  gruppera(widths, dw) {
    var groups, i, index, k, l, last, len, len1, n, ref, ref1, w;
    // prova att få in alla i EN grupp.
    // Går inte det, öka antal grupper
    n = 1;
    while (true) {
      groups = [];
      ref = range(n);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        groups.push([0, []]); // total bredd, indexes
      }
      ref1 = range(widths.length);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        [w, index] = widths[i];
        groups[0][0] += w; // bredderna
        groups[0][1].push(index); // indexen
        groups.sort(); // sortera på bredd
      }
      last = groups[groups.length - 1];
      if (last[0] + (last[1].length - 1) * twSEP <= dw) {
        return groups.map(function(group) {
          return group[1];
        });
      }
      n++;
    }
  }

};

// class TextScroller
// 	constructor : (@dx,@dy,@dw,@dh,@ts) ->
// 		# Observera: iOS + image kräver heltal för parametrarna
// 		@dx = Math.round @dx
// 		@dy = Math.round @dy
// 		@dw = Math.round @dw
// 		@dh = Math.round @dh
// 		@ts = Math.round @ts
// 		@pg = createGraphics 10000, @dh # w

// 	update : (txt) ->
// 		@text = txt
// 		push()
// 		textSize @ts
// 		@visible = @text != ''
// 		@sz = Math.round textWidth @text
// 		@scroll = @sz > @dw
// 		if @scroll
// 			@sz = Math.round textWidth @text + ' • '
// 			@makeImage @text + ' • ' + @text
// 			@p = 0 
// 		else
// 			@makeImage @text
// 		pop() 

// 	makeImage : (txt) ->
// 		@pg.background "black"
// 		@pg.textSize @ts
// 		@pg.fill "gray"
// 		@pg.textAlign LEFT,CENTER
// 		@pg.text txt,0,Math.round @dh/2

// 	draw : () ->
// 		if @visible
// 			if @scroll
// 				image @pg,@dx,@dy,@dw,@dh,@p,0,@dw,@dh
// 				@p = (@p+1) % @sz
// 			else
// 				image @pg,@dx,@dy

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\TextScroller.coffee