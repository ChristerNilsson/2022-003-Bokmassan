// Generated by CoffeeScript 2.5.1
var SEPARATOR, TextDisplay, twSEP;

SEPARATOR = ' • ';

twSEP = 0;

TextDisplay = class TextDisplay {
  constructor(dx, dy, dw1, dh, ts) {
    this.dx = dx;
    this.dy = dy;
    this.dw = dw1;
    this.dh = dh;
    this.ts = ts;
    this.dw = Math.round(this.dw);
    this.dh = Math.round(this.dh);
    this.ts = Math.round(this.ts);
  }

  update(text) {
    var group, i, index, j, k, l, len, len1, n, name, ref, results, summa, w, widths, wx, wy;
    this.text = text;
    if (text.length === 0) {
      this.names = [];
    } else {
      this.names = this.text.split(', ');
    }
    if (this.names.length === 0) {
      this.groups = [];
    }
    if (this.names.length === 1) {
      this.groups = [[0]];
    }
    textSize(this.ts);
    twSEP = textWidth(SEPARATOR);
    widths = this.names.map(function(name, index) {
      return [Math.round(textWidth(name)), index];
    });
    widths.sort();
    widths.reverse();
    summa = 0;
    for (k = 0, len = widths.length; k < len; k++) {
      [w, index] = widths[k];
      summa += w;
    }
    if (summa === 0) {
      return [];
    }
    this.groups = this.gruppera(widths, this.dw);
    this.groups = this.groups.map(function(group) {
      return group.sort();
    });
    this.groups.sort();
    // skapa image med grupperna A, ABA, ABCAB, ABCDAB
    n = this.groups.length;
    if (n < 2) {
      n++;
    } else {
      n += 2;
    }
    this.pg = createGraphics(this.dw, this.dh * n);
    this.pg.textSize(this.ts);
    this.pg.background("black");
    this.p = 0;
    ref = range(n);
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      group = this.groups[i % this.groups.length];
      wx = 0;
      wy = (i + 0.8) * this.dh;
      results.push((function() {
        var len2, m, ref1, results1;
        ref1 = range(group.length);
        results1 = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          j = ref1[m];
          index = group[j];
          name = this.names[index];
          if (j < group.length - 1) {
            name += SEPARATOR;
          }
          if (index === 0) {
            this.pg.fill('white');
          } else {
            this.pg.fill('gray');
          }
          this.pg.text(name, wx, wy);
          results1.push(wx += this.pg.textWidth(name));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  draw() {
    var n;
    n = this.groups.length;
    if (n === 0) {
      return;
    }
    if (n <= 2) {
      return image(this.pg, this.dx, this.dy, this.dw, n * this.dh, 0, 0, this.dw, n * this.dh);
    } else {
      image(this.pg, this.dx, this.dy, this.dw, 2 * this.dh, 0, Math.round(this.p), this.dw, 2 * this.dh);
      return this.p = (this.p + 0.25) % (this.pg.height - 2 * this.dh);
    }
  }

  gruppera(widths, dw) {
    var groups, i, index, k, l, last, len, len1, n, ref, ref1, w;
    // prova att få in alla i EN grupp.
    // Går inte det, öka antal grupper
    n = 1;
    while (true) {
      groups = [];
      ref = range(n);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        groups.push([0, []]); // total bredd, indexes
      }
      ref1 = range(widths.length);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        [w, index] = widths[i];
        groups[0][0] += w; // bredderna
        groups[0][1].push(index); // indexen
        groups.sort(); // sortera på bredd
      }
      last = groups[groups.length - 1];
      if (last[0] + (last[1].length - 1) * twSEP <= dw) {
        return groups.map(function(group) {
          return group[1];
        });
      }
      n++;
    }
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\TextScroller.coffee