// Generated by CoffeeScript 2.5.1
var SEPARATOR, TextDisplay, twSEP;

SEPARATOR = ' • ';

twSEP = 0;

TextDisplay = class TextDisplay {
  constructor(dx, dy, dw1, dh, ts) {
    this.dx = dx;
    this.dy = dy;
    this.dw = dw1;
    this.dh = dh;
    this.ts = ts;
    this.dw = Math.round(this.dw);
  }

  update(text) {
    var index, j, len, summa, w, widths;
    this.text = text;
    this.names = this.text.split(', ');
    if (this.text.length === 0) {
      this.groups = [];
    }
    if (this.names.length === 1) {
      this.groups = [[0]];
    }
    textSize(this.ts);
    twSEP = textWidth(SEPARATOR);
    widths = this.names.map(function(name, index) {
      return [Math.round(textWidth(name)), index];
    });
    widths.sort();
    widths.reverse();
    summa = 0;
    for (j = 0, len = widths.length; j < len; j++) {
      [w, index] = widths[j];
      summa += w;
    }
    if (summa === 0) {
      return [];
    }
    //if widths.length == 1 then return [[0]]
    this.groups = this.gruppera(widths, this.dw);
    return this.groups = this.groups.map(function(group) {
      return group.sort();
    });
  }

  draw() {
    var date, group, i, index, j, len, name, ref, results, w;
    textAlign(LEFT, CENTER);
    textSize(this.ts);
    date = new Date();
    if (this.groups.length === 0) {
      return;
    }
    group = this.groups[date.getSeconds() % this.groups.length];
    w = this.dx;
    ref = range(group.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      index = group[i];
      name = this.names[index];
      if (i < group.length - 1) {
        name += SEPARATOR;
      }
      if (index === 0) {
        fill('white');
      } else {
        fill('gray');
      }
      text(name, w, this.dy + this.dh / 2);
      results.push(w += textWidth(name));
    }
    return results;
  }

  gruppera(widths, dw) {
    var groups, i, index, j, k, last, len, len1, n, ref, ref1, w;
    // prova att få in alla i EN grupp.
    // Går inte det, öka antal grupper
    n = 1;
    while (true) {
      groups = [];
      ref = range(n);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        groups.push([0, []]); // total bredd, indexes
      }
      ref1 = range(widths.length);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        i = ref1[k];
        [w, index] = widths[i];
        groups[0][0] += w; // bredderna
        groups[0][1].push(index); // indexen
        groups.sort(); // sortera på bredd
      }
      last = groups[groups.length - 1];
      if (last[0] + (last[1].length - 1) * twSEP <= dw) {
        return groups.map(function(group) {
          return group[1];
        });
      }
      n++;
    }
  }

};

// class TextScroller
// 	constructor : (@dx,@dy,@dw,@dh,@ts) ->
// 		# Observera: iOS + image kräver heltal för parametrarna
// 		@dx = Math.round @dx
// 		@dy = Math.round @dy
// 		@dw = Math.round @dw
// 		@dh = Math.round @dh
// 		@ts = Math.round @ts
// 		@pg = createGraphics 10000, @dh # w

// 	update : (txt) ->
// 		@text = txt
// 		push()
// 		textSize @ts
// 		@visible = @text != ''
// 		@sz = Math.round textWidth @text
// 		@scroll = @sz > @dw
// 		if @scroll
// 			@sz = Math.round textWidth @text + ' • '
// 			@makeImage @text + ' • ' + @text
// 			@p = 0 
// 		else
// 			@makeImage @text
// 		pop() 

// 	makeImage : (txt) ->
// 		@pg.background "black"
// 		@pg.textSize @ts
// 		@pg.fill "gray"
// 		@pg.textAlign LEFT,CENTER
// 		@pg.text txt,0,Math.round @dh/2

// 	draw : () ->
// 		if @visible
// 			if @scroll
// 				image @pg,@dx,@dy,@dw,@dh,@p,0,@dw,@dh
// 				@p = (@p+1) % @sz
// 			else
// 				image @pg,@dx,@dy

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dFNjcm9sbGVyLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXFRleHRTY3JvbGxlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQTs7QUFBQSxTQUFBLEdBQVk7O0FBQ1osS0FBQSxHQUFROztBQUVGLGNBQU4sTUFBQSxZQUFBO0VBQ0MsV0FBYyxHQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFHLElBQUMsQ0FBQTtJQUFHLElBQUMsQ0FBQTtJQUFHLElBQUMsQ0FBQTtJQUFHLElBQUMsQ0FBQTtJQUMvQixJQUFDLENBQUEsRUFBRCxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBQyxDQUFBLEVBQVo7RUFETzs7RUFHZCxNQUFTLENBQUMsSUFBRCxDQUFBO0FBQ1YsUUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBO0lBQUUsSUFBQyxDQUFBLElBQUQsR0FBUTtJQUNSLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFOLENBQVksSUFBWjtJQUNULElBQUcsSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLEtBQWdCLENBQW5CO01BQTBCLElBQUMsQ0FBQSxNQUFELEdBQVUsR0FBcEM7O0lBQ0EsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsS0FBaUIsQ0FBcEI7TUFBMkIsSUFBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLENBQUMsQ0FBRCxDQUFELEVBQXJDOztJQUNBLFFBQUEsQ0FBUyxJQUFDLENBQUEsRUFBVjtJQUNBLEtBQUEsR0FBUSxTQUFBLENBQVUsU0FBVjtJQUNSLE1BQUEsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFBLENBQUMsSUFBRCxFQUFNLEtBQU4sQ0FBQTthQUFnQixDQUFDLElBQUksQ0FBQyxLQUFMLENB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QUMsQ0FBRCxDQUFHLENBQUMsTUFBUixHQUFlLENBQWhCLENBQUEsR0FBcUIsS0FBL0IsSUFBd0MsRUFBM0M7QUFDQyxlQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsUUFBQSxDQUFDLEtBQUQsQ0FBQTtpQkFBVyxLQUFLLENBQUMsQ0FBRDtRQUFoQixDQUFYLEVBRFI7O01BRUEsQ0FBQTtJQVpEO0VBSlU7O0FBckNaOztBQUhBIiwic291cmNlc0NvbnRlbnQiOlsiU0VQQVJBVE9SID0gJyDigKIgJ1xyXG50d1NFUCA9IDBcclxuXHJcbmNsYXNzIFRleHREaXNwbGF5XHJcblx0Y29uc3RydWN0b3IgOiAoQGR4LEBkeSxAZHcsQGRoLEB0cykgLT5cclxuXHRcdEBkdyA9IE1hdGgucm91bmQgQGR3XHJcblxyXG5cdHVwZGF0ZSA6ICh0ZXh0KSAtPlxyXG5cdFx0QHRleHQgPSB0ZXh0XHJcblx0XHRAbmFtZXMgPSBAdGV4dC5zcGxpdCAnLCAnXHJcblx0XHRpZiBAdGV4dC5sZW5ndGggPT0gMCB0aGVuIEBncm91cHMgPSBbXVxyXG5cdFx0aWYgQG5hbWVzLmxlbmd0aCA9PSAxIHRoZW4gQGdyb3VwcyA9IFtbMF1dXHJcblx0XHR0ZXh0U2l6ZSBAdHNcclxuXHRcdHR3U0VQID0gdGV4dFdpZHRoIFNFUEFSQVRPUlxyXG5cdFx0d2lkdGhzID0gQG5hbWVzLm1hcCAobmFtZSxpbmRleCkgLT4gW01hdGgucm91bmQodGV4dFdpZHRoKG5hbWUpKSxpbmRleF1cclxuXHRcdHdpZHRocy5zb3J0KClcclxuXHRcdHdpZHRocy5yZXZlcnNlKClcclxuXHRcdHN1bW1hID0gMFxyXG5cdFx0Zm9yIFt3LGluZGV4XSBpbiB3aWR0aHNcclxuXHRcdFx0c3VtbWEgKz0gd1xyXG5cdFx0aWYgc3VtbWEgPT0gMCB0aGVuIHJldHVybiBbXVxyXG5cdFx0I2lmIHdpZHRocy5sZW5ndGggPT0gMSB0aGVuIHJldHVybiBbWzBdXVxyXG5cdFx0QGdyb3VwcyA9IEBncnVwcGVyYSB3aWR0aHMsQGR3XHJcblx0XHRAZ3JvdXBzID0gQGdyb3Vwcy5tYXAgKGdyb3VwKSAtPiBncm91cC5zb3J0KClcclxuXHJcblx0ZHJhdyA6ICgpIC0+XHJcblx0XHR0ZXh0QWxpZ24gTEVGVCxDRU5URVJcclxuXHRcdHRleHRTaXplIEB0c1xyXG5cdFx0ZGF0ZSA9IG5ldyBEYXRlKClcclxuXHRcdGlmIEBncm91cHMubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHRcdGdyb3VwID0gQGdyb3Vwc1tkYXRlLmdldFNlY29uZHMoKSAlIEBncm91cHMubGVuZ3RoXVxyXG5cdFx0dyA9IEBkeFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgZ3JvdXAubGVuZ3RoIFxyXG5cdFx0XHRpbmRleCA9IGdyb3VwW2ldXHJcblx0XHRcdG5hbWUgPSBAbmFtZXNbaW5kZXhdXHJcblx0XHRcdGlmIGk8Z3JvdXAubGVuZ3RoLTEgdGhlbiBuYW1lICs9IFNFUEFSQVRPUlxyXG5cdFx0XHRpZiBpbmRleCA9PSAwIHRoZW4gZmlsbCAnd2hpdGUnIGVsc2UgZmlsbCAnZ3JheSdcclxuXHRcdFx0dGV4dCBuYW1lLCB3LEBkeStAZGgvMlxyXG5cdFx0XHR3ICs9IHRleHRXaWR0aCBuYW1lIFxyXG5cclxuXHRncnVwcGVyYSA6ICh3aWR0aHMsZHcpIC0+XHJcblx0XHQjIHByb3ZhIGF0dCBmw6UgaW4gYWxsYSBpIEVOIGdydXBwLlxyXG5cdFx0IyBHw6VyIGludGUgZGV0LCDDtmthIGFudGFsIGdydXBwZXJcclxuXHRcdG4gPSAxXHJcblx0XHR3aGlsZSB0cnVlXHJcblx0XHRcdGdyb3VwcyA9IFtdXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIG4gXHJcblx0XHRcdFx0Z3JvdXBzLnB1c2ggWzAsW11dICMgdG90YWwgYnJlZGQsIGluZGV4ZXNcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2Ugd2lkdGhzLmxlbmd0aCBcclxuXHRcdFx0XHRbdyxpbmRleF0gPSB3aWR0aHNbaV1cclxuXHRcdFx0XHRncm91cHNbMF1bMF0gKz0gdyAjIGJyZWRkZXJuYVxyXG5cdFx0XHRcdGdyb3Vwc1swXVsxXS5wdXNoIGluZGV4ICMgaW5kZXhlblxyXG5cdFx0XHRcdGdyb3Vwcy5zb3J0KCkgIyBzb3J0ZXJhIHDDpSBicmVkZFxyXG5cdFx0XHRsYXN0ID0gZ3JvdXBzW2dyb3Vwcy5sZW5ndGgtMV0gIyBicmVkYXN0ZSBncnVwcGVuXHJcblx0XHRcdGlmIGxhc3RbMF0gKyAobGFzdFsxXS5sZW5ndGgtMSkgKiB0d1NFUCA8PSBkd1xyXG5cdFx0XHRcdHJldHVybiBncm91cHMubWFwIChncm91cCkgLT4gZ3JvdXBbMV0gIyBza2lwcGEgYnJlZGRlcm5hXHJcblx0XHRcdG4rK1xyXG5cclxuXHJcbiMgY2xhc3MgVGV4dFNjcm9sbGVyXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAZHgsQGR5LEBkdyxAZGgsQHRzKSAtPlxyXG4jIFx0XHQjIE9ic2VydmVyYTogaU9TICsgaW1hZ2Uga3LDpHZlciBoZWx0YWwgZsO2ciBwYXJhbWV0cmFybmFcclxuIyBcdFx0QGR4ID0gTWF0aC5yb3VuZCBAZHhcclxuIyBcdFx0QGR5ID0gTWF0aC5yb3VuZCBAZHlcclxuIyBcdFx0QGR3ID0gTWF0aC5yb3VuZCBAZHdcclxuIyBcdFx0QGRoID0gTWF0aC5yb3VuZCBAZGhcclxuIyBcdFx0QHRzID0gTWF0aC5yb3VuZCBAdHNcclxuIyBcdFx0QHBnID0gY3JlYXRlR3JhcGhpY3MgMTAwMDAsIEBkaCAjIHdcclxuXHJcbiMgXHR1cGRhdGUgOiAodHh0KSAtPlxyXG4jIFx0XHRAdGV4dCA9IHR4dFxyXG4jIFx0XHRwdXNoKClcclxuIyBcdFx0dGV4dFNpemUgQHRzXHJcbiMgXHRcdEB2aXNpYmxlID0gQHRleHQgIT0gJydcclxuIyBcdFx0QHN6ID0gTWF0aC5yb3VuZCB0ZXh0V2lkdGggQHRleHRcclxuIyBcdFx0QHNjcm9sbCA9IEBzeiA+IEBkd1xyXG4jIFx0XHRpZiBAc2Nyb2xsXHJcbiMgXHRcdFx0QHN6ID0gTWF0aC5yb3VuZCB0ZXh0V2lkdGggQHRleHQgKyAnIOKAoiAnXHJcbiMgXHRcdFx0QG1ha2VJbWFnZSBAdGV4dCArICcg4oCiICcgKyBAdGV4dFxyXG4jIFx0XHRcdEBwID0gMCBcclxuIyBcdFx0ZWxzZVxyXG4jIFx0XHRcdEBtYWtlSW1hZ2UgQHRleHRcclxuIyBcdFx0cG9wKCkgXHJcblxyXG4jIFx0bWFrZUltYWdlIDogKHR4dCkgLT5cclxuIyBcdFx0QHBnLmJhY2tncm91bmQgXCJibGFja1wiXHJcbiMgXHRcdEBwZy50ZXh0U2l6ZSBAdHNcclxuIyBcdFx0QHBnLmZpbGwgXCJncmF5XCJcclxuIyBcdFx0QHBnLnRleHRBbGlnbiBMRUZULENFTlRFUlxyXG4jIFx0XHRAcGcudGV4dCB0eHQsMCxNYXRoLnJvdW5kIEBkaC8yXHJcblxyXG4jIFx0ZHJhdyA6ICgpIC0+XHJcbiMgXHRcdGlmIEB2aXNpYmxlXHJcbiMgXHRcdFx0aWYgQHNjcm9sbFxyXG4jIFx0XHRcdFx0aW1hZ2UgQHBnLEBkeCxAZHksQGR3LEBkaCxAcCwwLEBkdyxAZGhcclxuIyBcdFx0XHRcdEBwID0gKEBwKzEpICUgQHN6XHJcbiMgXHRcdFx0ZWxzZVxyXG4jIFx0XHRcdFx0aW1hZ2UgQHBnLEBkeCxAZHlcclxuIl19
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\TextScroller.coffee