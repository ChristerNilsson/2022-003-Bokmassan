// Generated by CoffeeScript 2.5.1
var SEPARATOR, TextDisplay, twSEP;

SEPARATOR = ' • ';

twSEP = 0;

TextDisplay = class TextDisplay {
  constructor(dx, dy, dw1, dh, ts) {
    this.dx = dx;
    this.dy = dy;
    this.dw = dw1;
    this.dh = dh;
    this.ts = ts;
    this.dw = Math.round(this.dw);
    this.dh = Math.round(this.dh);
    this.ts = Math.round(this.ts);
    this.pg = createGraphics(this.dw, this.dh * 5); // Klarar ABCAB med scroll
  }

  update(text) {
    var group, i, index, j, l, len, len1, n, name, o, ref, results, summa, w, widths, wx, wy;
    this.text = text;
    this.names = text.length === 0 ? [] : this.text.split(', ');
    if (this.names.length === 0) {
      this.groups = [];
    }
    if (this.names.length === 1) {
      this.groups = [[0]];
    }
    textSize(this.ts);
    twSEP = textWidth(SEPARATOR);
    widths = this.names.map(function(name) {
      return Math.round(textWidth(name));
    });
    //widths.sort (a,b) -> parseInt(a[0]) - parseInt(b[0])
    //widths.reverse()
    summa = 0;
    for (l = 0, len = widths.length; l < len; l++) {
      w = widths[l];
      summa += w;
    }
    if (summa === 0) {
      return [];
    }
    this.groups = this.gruppera(widths, this.dw);
    this.groups = this.groups.map(function(group) {
      return group.sort();
    });
    this.groups.sort();
    // skapa image med grupperna A, AB, ABCAB, ABCDAB
    n = this.groups.length;
    if (n < 2) {
      n += 1;
    } else {
      n += 2;
    }
    this.pg.textSize(this.ts);
    this.pg.background("black");
    this.p = 0;
    ref = range(n);
    results = [];
    for (o = 0, len1 = ref.length; o < len1; o++) {
      i = ref[o];
      group = this.groups[i % this.groups.length];
      wx = 0;
      wy = (i + 0.8) * this.dh;
      results.push((function() {
        var len2, p, ref1, results1;
        ref1 = range(group.length);
        results1 = [];
        for (p = 0, len2 = ref1.length; p < len2; p++) {
          j = ref1[p];
          index = group[j];
          name = this.names[index];
          if (j < group.length - 1) {
            name += SEPARATOR;
          }
          this.pg.fill(index === 0 ? 'white' : 'gray');
          this.pg.text(name, wx, wy);
          results1.push(wx += this.pg.textWidth(name));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  draw() {
    var n;
    n = this.groups.length;
    if (n === 0) {
      return;
    }
    if (n <= 2) {
      return image(this.pg, this.dx, this.dy, this.dw, n * this.dh, 0, 0, this.dw, n * this.dh);
    } else {
      image(this.pg, this.dx, this.dy, this.dw, 2 * this.dh, 0, Math.round(this.p), this.dw, 2 * this.dh);
      return this.p = (this.p + 0.25) % (this.pg.height - 2 * this.dh);
    }
  }

  gruppera(widths, dw) {
    var bestGroups, bestSums, lastGroup, lastSum, n;
    // prova att få in alla i först EN, därefter TVÅ grupper
    // Går inte det, öka antal grupper
    n = widths.length === 1 ? 1 : 2;
    while (true) {
      [bestGroups, bestSums] = this.grupperaRandom(widths, n);
      lastSum = _.last(bestSums); // bredaste gruppen
      lastGroup = _.last(bestGroups);
      if (lastSum + (lastGroup.length - 1) * twSEP <= dw) {
        return bestGroups;
      }
      n++;
    }
  }

  grupperaRandom(widths, n, m = 1000) {
    var best, bestGroups, bestSums, diff, groups, i, j, k, l, len, len1, o, ref, ref1, sums;
    // widths = bredderna
    // n = antal grupper
    // m = antal försök
    best = 999999;
    ref = range(m);
    for (l = 0, len = ref.length; l < len; l++) {
      k = ref[l];
      groups = range(n).map(function() {
        return [];
      });
      sums = range(n).map(function() {
        return 0;
      });
      ref1 = range(widths.length);
      for (o = 0, len1 = ref1.length; o < len1; o++) {
        i = ref1[o];
        j = Math.floor(Math.random() * n);
        groups[j].push(i);
        sums[j] += widths[i];
      }
      sums.sort(function(a, b) {
        return parseInt(a) - parseInt(b);
      });
      diff = sums[n - 1] - sums[0];
      if (diff < best) {
        best = diff;
        bestGroups = groups;
        bestSums = sums;
      }
    }
    // console.log @names
    // console.log widths
    // console.log bestGroups
    // console.log bestSums
    return [bestGroups, bestSums];
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-003-Bokmassan\coffee\TextScroller.coffee